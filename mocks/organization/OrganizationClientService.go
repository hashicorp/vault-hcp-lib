// Code generated by mockery v2.34.2. DO NOT EDIT.

package orgmocks

import (
	runtime "github.com/go-openapi/runtime"
	organization_service "github.com/hashicorp/hcp-sdk-go/clients/cloud-resource-manager/stable/2019-12-10/client/organization_service"
	mock "github.com/stretchr/testify/mock"
)

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

// OrganizationServiceCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) OrganizationServiceCreate(params *organization_service.OrganizationServiceCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...organization_service.ClientOption) (*organization_service.OrganizationServiceCreateOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *organization_service.OrganizationServiceCreateOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceCreateParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) (*organization_service.OrganizationServiceCreateOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceCreateParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) *organization_service.OrganizationServiceCreateOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization_service.OrganizationServiceCreateOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*organization_service.OrganizationServiceCreateParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganizationServiceGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) OrganizationServiceGet(params *organization_service.OrganizationServiceGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...organization_service.ClientOption) (*organization_service.OrganizationServiceGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *organization_service.OrganizationServiceGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceGetParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) (*organization_service.OrganizationServiceGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceGetParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) *organization_service.OrganizationServiceGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization_service.OrganizationServiceGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*organization_service.OrganizationServiceGetParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganizationServiceGetIamPolicy provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) OrganizationServiceGetIamPolicy(params *organization_service.OrganizationServiceGetIamPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...organization_service.ClientOption) (*organization_service.OrganizationServiceGetIamPolicyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *organization_service.OrganizationServiceGetIamPolicyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceGetIamPolicyParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) (*organization_service.OrganizationServiceGetIamPolicyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceGetIamPolicyParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) *organization_service.OrganizationServiceGetIamPolicyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization_service.OrganizationServiceGetIamPolicyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*organization_service.OrganizationServiceGetIamPolicyParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganizationServiceGetRole provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) OrganizationServiceGetRole(params *organization_service.OrganizationServiceGetRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...organization_service.ClientOption) (*organization_service.OrganizationServiceGetRoleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *organization_service.OrganizationServiceGetRoleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceGetRoleParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) (*organization_service.OrganizationServiceGetRoleOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceGetRoleParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) *organization_service.OrganizationServiceGetRoleOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization_service.OrganizationServiceGetRoleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*organization_service.OrganizationServiceGetRoleParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganizationServiceList provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) OrganizationServiceList(params *organization_service.OrganizationServiceListParams, authInfo runtime.ClientAuthInfoWriter, opts ...organization_service.ClientOption) (*organization_service.OrganizationServiceListOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *organization_service.OrganizationServiceListOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceListParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) (*organization_service.OrganizationServiceListOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceListParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) *organization_service.OrganizationServiceListOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization_service.OrganizationServiceListOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*organization_service.OrganizationServiceListParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganizationServiceListRoles provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) OrganizationServiceListRoles(params *organization_service.OrganizationServiceListRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...organization_service.ClientOption) (*organization_service.OrganizationServiceListRolesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *organization_service.OrganizationServiceListRolesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceListRolesParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) (*organization_service.OrganizationServiceListRolesOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceListRolesParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) *organization_service.OrganizationServiceListRolesOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization_service.OrganizationServiceListRolesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*organization_service.OrganizationServiceListRolesParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganizationServiceSetIamPolicy provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) OrganizationServiceSetIamPolicy(params *organization_service.OrganizationServiceSetIamPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...organization_service.ClientOption) (*organization_service.OrganizationServiceSetIamPolicyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *organization_service.OrganizationServiceSetIamPolicyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceSetIamPolicyParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) (*organization_service.OrganizationServiceSetIamPolicyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceSetIamPolicyParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) *organization_service.OrganizationServiceSetIamPolicyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization_service.OrganizationServiceSetIamPolicyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*organization_service.OrganizationServiceSetIamPolicyParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganizationServiceSetName provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) OrganizationServiceSetName(params *organization_service.OrganizationServiceSetNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...organization_service.ClientOption) (*organization_service.OrganizationServiceSetNameOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *organization_service.OrganizationServiceSetNameOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceSetNameParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) (*organization_service.OrganizationServiceSetNameOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceSetNameParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) *organization_service.OrganizationServiceSetNameOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization_service.OrganizationServiceSetNameOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*organization_service.OrganizationServiceSetNameParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganizationServiceTestIamPermissions provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) OrganizationServiceTestIamPermissions(params *organization_service.OrganizationServiceTestIamPermissionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...organization_service.ClientOption) (*organization_service.OrganizationServiceTestIamPermissionsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *organization_service.OrganizationServiceTestIamPermissionsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceTestIamPermissionsParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) (*organization_service.OrganizationServiceTestIamPermissionsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceTestIamPermissionsParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) *organization_service.OrganizationServiceTestIamPermissionsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization_service.OrganizationServiceTestIamPermissionsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*organization_service.OrganizationServiceTestIamPermissionsParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *ClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// NewClientService creates a new instance of ClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientService {
	mock := &ClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
