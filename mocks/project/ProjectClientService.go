// Code generated by mockery v2.34.2. DO NOT EDIT.

package projmocks

import (
	runtime "github.com/go-openapi/runtime"
	project_service "github.com/hashicorp/hcp-sdk-go/clients/cloud-resource-manager/stable/2019-12-10/client/project_service"
	mock "github.com/stretchr/testify/mock"
)

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

// ProjectServiceCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ProjectServiceCreate(params *project_service.ProjectServiceCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...project_service.ClientOption) (*project_service.ProjectServiceCreateOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *project_service.ProjectServiceCreateOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceCreateParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) (*project_service.ProjectServiceCreateOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceCreateParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) *project_service.ProjectServiceCreateOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project_service.ProjectServiceCreateOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*project_service.ProjectServiceCreateParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectServiceDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ProjectServiceDelete(params *project_service.ProjectServiceDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...project_service.ClientOption) (*project_service.ProjectServiceDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *project_service.ProjectServiceDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceDeleteParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) (*project_service.ProjectServiceDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceDeleteParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) *project_service.ProjectServiceDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project_service.ProjectServiceDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*project_service.ProjectServiceDeleteParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectServiceGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ProjectServiceGet(params *project_service.ProjectServiceGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...project_service.ClientOption) (*project_service.ProjectServiceGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *project_service.ProjectServiceGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceGetParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) (*project_service.ProjectServiceGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceGetParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) *project_service.ProjectServiceGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project_service.ProjectServiceGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*project_service.ProjectServiceGetParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectServiceGetIamPolicy provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ProjectServiceGetIamPolicy(params *project_service.ProjectServiceGetIamPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...project_service.ClientOption) (*project_service.ProjectServiceGetIamPolicyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *project_service.ProjectServiceGetIamPolicyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceGetIamPolicyParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) (*project_service.ProjectServiceGetIamPolicyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceGetIamPolicyParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) *project_service.ProjectServiceGetIamPolicyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project_service.ProjectServiceGetIamPolicyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*project_service.ProjectServiceGetIamPolicyParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectServiceGetProjectsCount provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ProjectServiceGetProjectsCount(params *project_service.ProjectServiceGetProjectsCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...project_service.ClientOption) (*project_service.ProjectServiceGetProjectsCountOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *project_service.ProjectServiceGetProjectsCountOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceGetProjectsCountParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) (*project_service.ProjectServiceGetProjectsCountOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceGetProjectsCountParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) *project_service.ProjectServiceGetProjectsCountOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project_service.ProjectServiceGetProjectsCountOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*project_service.ProjectServiceGetProjectsCountParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectServiceList provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ProjectServiceList(params *project_service.ProjectServiceListParams, authInfo runtime.ClientAuthInfoWriter, opts ...project_service.ClientOption) (*project_service.ProjectServiceListOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *project_service.ProjectServiceListOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceListParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) (*project_service.ProjectServiceListOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceListParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) *project_service.ProjectServiceListOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project_service.ProjectServiceListOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*project_service.ProjectServiceListParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectServiceSetDescription provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ProjectServiceSetDescription(params *project_service.ProjectServiceSetDescriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...project_service.ClientOption) (*project_service.ProjectServiceSetDescriptionOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *project_service.ProjectServiceSetDescriptionOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceSetDescriptionParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) (*project_service.ProjectServiceSetDescriptionOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceSetDescriptionParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) *project_service.ProjectServiceSetDescriptionOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project_service.ProjectServiceSetDescriptionOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*project_service.ProjectServiceSetDescriptionParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectServiceSetIamPolicy provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ProjectServiceSetIamPolicy(params *project_service.ProjectServiceSetIamPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...project_service.ClientOption) (*project_service.ProjectServiceSetIamPolicyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *project_service.ProjectServiceSetIamPolicyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceSetIamPolicyParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) (*project_service.ProjectServiceSetIamPolicyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceSetIamPolicyParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) *project_service.ProjectServiceSetIamPolicyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project_service.ProjectServiceSetIamPolicyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*project_service.ProjectServiceSetIamPolicyParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectServiceSetName provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ProjectServiceSetName(params *project_service.ProjectServiceSetNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...project_service.ClientOption) (*project_service.ProjectServiceSetNameOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *project_service.ProjectServiceSetNameOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceSetNameParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) (*project_service.ProjectServiceSetNameOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceSetNameParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) *project_service.ProjectServiceSetNameOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project_service.ProjectServiceSetNameOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*project_service.ProjectServiceSetNameParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectServiceTestIamPermissions provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ProjectServiceTestIamPermissions(params *project_service.ProjectServiceTestIamPermissionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...project_service.ClientOption) (*project_service.ProjectServiceTestIamPermissionsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *project_service.ProjectServiceTestIamPermissionsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceTestIamPermissionsParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) (*project_service.ProjectServiceTestIamPermissionsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceTestIamPermissionsParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) *project_service.ProjectServiceTestIamPermissionsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project_service.ProjectServiceTestIamPermissionsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*project_service.ProjectServiceTestIamPermissionsParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *ClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// NewClientService creates a new instance of ClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientService {
	mock := &ClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
